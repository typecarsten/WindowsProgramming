<UserControl x:Class="_02350Demo.View.SidePanelUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="600" d:DesignWidth="240">
    <!--Dette StackPanel organisere inholdet fra top til bund.-->
    <StackPanel Width="240">
        <!--Denne GroupBox sætter en ramme rundt om Undo / Redo knapperne.-->
        <GroupBox Header="Undo / Redo" Foreground="White" Margin="6">
            <!--Grid med 2 søjlere bruges til at organisere de to knapper med lige meget plads i bredden.-->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <!--Undo knappen er bundet til UndoCommand-->
                <Button Content="Undo" Command="{Binding UndoCommand}" Margin="6,4"/>
                <!--Redo knappen er bundet til RedoCommand-->
                <Button Grid.Column="1"  Content="Redo" Command="{Binding RedoCommand}" Margin="6,4"/>
            </Grid>
        </GroupBox>
        <!--Denne GroupBox sætter en ramme rundt om Node funktionaliteten.-->
        <GroupBox Header="Noder" Foreground="White" Margin="6">
            <!--Organisere fra top til bund.-->
            <StackPanel>
                <!--Knap bundet til AddNodeCommand-->
                <Button Content="Tilføj node" Command="{Binding AddNodeCommand}"/>
                <!--Denne DataGrid (der er ligesom et excel ark) kan bruge til at se punkterne og ændre der attributer.-->
                <DataGrid x:Name="dgNodes" Height="140" ItemsSource="{Binding Nodes}" HeadersVisibility="Column" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False">
                    <DataGrid.Columns>
                        <DataGridTextColumn Binding="{Binding Number}" Header="Nummer" Width="*" IsReadOnly="True"/>
                        <DataGridTextColumn Binding="{Binding X}" Header="X" Width="*"/>
                        <DataGridTextColumn Binding="{Binding Y}" Header="Y" Width="*"/>
                        <DataGridTextColumn Binding="{Binding Width}" Header="Bredde" Width="*"/>
                        <DataGridTextColumn Binding="{Binding Height}" Header="Højde" Width="*"/>
                    </DataGrid.Columns>
                </DataGrid>
                <!--Knap bundet til RemoveNodeCommand-->
                <Button Content="Fjern valgt node" Command="{Binding RemoveNodeCommand}" CommandParameter="{Binding ElementName=dgNodes, Path=SelectedItems}"/>
            </StackPanel>
        </GroupBox>
        <!--Denne GroupBox sætter en ramme rundt om Edge funktionaliteten.-->
        <GroupBox Header="Kanter" Foreground="White" Margin="6">
            <!--Organisere fra top til bund.-->
            <StackPanel>
                <!--Knap bundet til AddEdgeCommand-->
                <Button Content="Tilføj kant" Command="{Binding AddEdgeCommand}"/>
                <!--Denne DataGrid (der er ligesom et excel ark) kan bruge til at se kanterne og ændre der attributer.-->
                <DataGrid x:Name="dgEdges" Height="140" ItemsSource="{Binding Edges}" HeadersVisibility="Column" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False">
                    <DataGrid.Columns>
                        <!--Det interessante ved denne databinding er at UpdateSourceTrigger er sat til PropertyChanged i modsætning til standarden der er LostFocus, -->
                        <!--så nu ændres værdien altså hver gang noget gøres af brugere i stedet for når fokus forlader stedet.-->
                        <DataGridComboBoxColumn Header="A" DisplayMemberPath="." Width="*" SelectedItemBinding="{Binding EndA, UpdateSourceTrigger=PropertyChanged}">
                            <!--Disse Styles skal desværre, som det er nu bruges for at man kan ændre værdien med en ComboBox i WPF.-->
                            <DataGridComboBoxColumn.ElementStyle>
                                <Style TargetType="{x:Type ComboBox}">
                                    <!--Denne databinding er interessant fordi RelativeSource værdien er sat.-->
                                    <!--Det skyldes at hver række i denne DataGrid er bundet til en kant og de vi vil binde til her er MainWindow'ets ViewModel, som også er UserControllens ViewModel-->
                                    <Setter Property="ItemsSource" Value="{Binding DataContext.Nodes, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                                </Style>
                            </DataGridComboBoxColumn.ElementStyle>
                            <!--Disse Styles skal desværre, som det er nu bruges for at man kan ændre værdien med en ComboBox i WPF.-->
                            <DataGridComboBoxColumn.EditingElementStyle>
                                <Style TargetType="{x:Type ComboBox}">
                                    <Setter Property="ItemsSource" Value="{Binding DataContext.Nodes, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                                </Style>
                            </DataGridComboBoxColumn.EditingElementStyle>
                        </DataGridComboBoxColumn>
                        <DataGridComboBoxColumn Header="B" DisplayMemberPath="." Width="*" SelectedItemBinding="{Binding EndB, UpdateSourceTrigger=PropertyChanged}">
                            <!--Disse Styles skal desværre, som det er nu bruges for at man kan ændre værdien med en ComboBox i WPF.-->
                            <DataGridComboBoxColumn.ElementStyle>
                                <Style TargetType="{x:Type ComboBox}">
                                    <Setter Property="ItemsSource" Value="{Binding DataContext.Nodes, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                                </Style>
                            </DataGridComboBoxColumn.ElementStyle>
                            <!--Disse Styles skal desværre, som det er nu bruges for at man kan ændre værdien med en ComboBox i WPF.-->
                            <DataGridComboBoxColumn.EditingElementStyle>
                                <Style TargetType="{x:Type ComboBox}">
                                    <Setter Property="ItemsSource" Value="{Binding DataContext.Nodes, RelativeSource={RelativeSource AncestorType={x:Type UserControl}}}" />
                                </Style>
                            </DataGridComboBoxColumn.EditingElementStyle>
                        </DataGridComboBoxColumn>
                    </DataGrid.Columns>
                </DataGrid>
                <!--Knap bundet til RemoveEdgesCommand-->
                <Button Content="Fjern valgte kanter" Command="{Binding RemoveEdgesCommand}" CommandParameter="{Binding ElementName=dgEdges, Path=SelectedItems}"/>
            </StackPanel>
        </GroupBox>
        <!--Baggrunden for side panellet er en Gradient, en farveblanding der går imellem farver.-->
        <StackPanel.Background>
            <LinearGradientBrush StartPoint="0,1">
                <GradientStop Color="White" Offset="0.0" />
                <GradientStop Color="CornflowerBlue" Offset="0.001" />
                <GradientStop Color="Blue" Offset="0.30" />
                <GradientStop Color="Blue" Offset="0.50" />
                <GradientStop Color="Blue" Offset="0.60" />
                <GradientStop Color="DarkBlue" Offset="0.999" />
                <GradientStop Color="Black" Offset="1" />
            </LinearGradientBrush>
        </StackPanel.Background>
    </StackPanel>
</UserControl>
